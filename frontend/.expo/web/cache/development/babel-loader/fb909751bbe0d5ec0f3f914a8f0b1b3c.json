{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\adula\\\\Documents\\\\GitHub\\\\haiku\\\\frontend\\\\components\\\\main\\\\Comment.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchUsersData } from \"../../redux/actions/index\";\n\nfunction Comment(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      postId = _useState4[0],\n      setPostId = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      text = _useState6[0],\n      setText = _useState6[1];\n\n  useEffect(function () {\n    function matchUserToComment(comments) {\n      var _loop = function _loop(i) {\n        if (comments[i].hasOwnProperty('user')) {\n          return \"continue\";\n        }\n\n        var user = props.user.find(function (x) {\n          return x.uid === comments[i].creator;\n        });\n\n        if (user == undefined) {\n          props.fetchUsersData(comments[i].creator, false);\n        } else {\n          comments[i].user = user;\n        }\n      };\n\n      for (var i = 0; i < comments.length; i++) {\n        var _ret = _loop(i);\n\n        if (_ret === \"continue\") continue;\n      }\n\n      setComments(comments);\n    }\n\n    if (props.route.params.postId !== postId) {\n      firebase.firestore().collection('posts').doc(props.route.params.uid).collection('userPosts').doc(props.route.params.uid).collection('comments').get().then(function (snapshot) {\n        var comments = snapshot.docs.map(function (doc) {\n          var data = doc.data();\n          var id = doc.id;\n          return _objectSpread({\n            id: id\n          }, data);\n        });\n        matchUserToComment(comments);\n      });\n      setPostId(props.route.params.postID);\n    } else {\n      matchUserToComment(comments);\n    }\n  }, [props.route.params.postId, props.users]);\n\n  var onCommentSend = function onCommentSend() {\n    firebase.firestore().collection('posts').doc(props.route.params.uid).collection('userPosts').doc(props.route.params.uid).collection('comments').add({\n      creator: firebase.auth().currentUser.uid,\n      text: text\n    });\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    numColumns: 1,\n    horizontal: false,\n    data: comments,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }\n      }, item.user !== undefined ? React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }\n      }, item.user.name) : null, React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }\n      }, item.text));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"comment...\",\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return onCommentSend();\n    },\n    title: \"Send\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  })));\n}\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    users: store.usersState.users\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchUsersData: fetchUsersData\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);","map":{"version":3,"sources":["C:/Users/adula/Documents/GitHub/haiku/frontend/components/main/Comment.js"],"names":["React","useState","useEffect","firebase","require","connect","bindActionCreators","fetchUsersData","Comment","props","comments","setComments","postId","setPostId","text","setText","matchUserToComment","i","hasOwnProperty","user","find","x","uid","creator","undefined","length","route","params","firestore","collection","doc","get","then","snapshot","docs","map","data","id","postID","users","onCommentSend","add","auth","currentUser","item","name","mapStateToProps","store","usersState","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { View, Text, FlatList, Button, TextInput } from 'react-native'\r\n\r\nimport firebase from 'firebase'\r\nrequire('firebase/firestore')\r\n\r\nimport {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\nimport {fetchUsersData} from '../../redux/actions/index'\r\n\r\nfunction Comment(props) {\r\n    const [comments, setComments] = useState([])\r\n    const [postId, setPostId] = useState(\"\")\r\n    const [text, setText] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n\r\n        function matchUserToComment(comments){\r\n            for(let i = 0; i<comments.length; i++){\r\n\r\n                if(comments[i].hasOwnProperty('user')){\r\n                    continue\r\n                }\r\n                const user = props.user.find(x => x.uid === comments[i].creator)\r\n                if (user == undefined) {\r\n                    props.fetchUsersData(comments[i].creator, false)\r\n                } else {\r\n                    comments[i].user = user\r\n                }\r\n            }\r\n            setComments(comments)\r\n        }\r\n\r\n        if(props.route.params.postId !== postId){\r\n            firebase.firestore()\r\n                .collection('posts')\r\n                .doc(props.route.params.uid)\r\n                .collection('userPosts')\r\n                .doc(props.route.params.uid)\r\n                .collection('comments')\r\n                .get()\r\n                .then((snapshot) => {\r\n                    let comments = snapshot.docs.map(doc => {\r\n                        const data = doc.data()\r\n                        const id = doc.id\r\n                        return {id, ...data}\r\n                    })\r\n                    matchUserToComment(comments)\r\n                })\r\n            setPostId(props.route.params.postID)\r\n        } else {\r\n            matchUserToComment(comments)\r\n        }\r\n    }, [props.route.params.postId, props.users])\r\n\r\n\r\n    const onCommentSend = () => {\r\n        firebase.firestore()\r\n            .collection('posts')\r\n            .doc(props.route.params.uid)\r\n            .collection('userPosts')\r\n            .doc(props.route.params.uid)\r\n            .collection('comments')\r\n            .add({\r\n                creator: firebase.auth().currentUser.uid,\r\n                text\r\n            })\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <FlatList\r\n                numColumns={1}\r\n                horizontal={false}\r\n                data={comments}\r\n                renderItem={({item}) => (\r\n                    <View>\r\n                        {item.user !== undefined ? \r\n                            <Text>\r\n                                {item.user.name}\r\n                            </Text>\r\n                        : null }\r\n                        <Text>{item.text}</Text>\r\n                    </View>\r\n                )}\r\n            />\r\n\r\n            <View>\r\n                <TextInput\r\n                    placeholder='comment...'\r\n                    onChangeText={(text) => setText(text)}\r\n                />\r\n                <Button\r\n                    onPress={() => onCommentSend()}\r\n                    title='Send'\r\n                />\r\n            </View>\r\n\r\n        </View>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (store) => ({ users: store.usersState.users })\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({ fetchUsersData }, dispatch )\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )(Comment)\r\n"]},"metadata":{},"sourceType":"module"}