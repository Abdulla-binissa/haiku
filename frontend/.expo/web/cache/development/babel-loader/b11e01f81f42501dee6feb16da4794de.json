{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\adula\\\\Documents\\\\GitHub\\\\haiku\\\\frontend\\\\components\\\\main\\\\Save.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport firebase from 'firebase';\n\nrequire(\"firebase/firestore\");\n\nrequire(\"firebase/firebase-storage\");\n\nexport default function Save(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      caption = _useState2[0],\n      setCaption = _useState2[1];\n\n  var upploadImage = function upploadImage() {\n    var uri, childPath, response, blob, task, taskProgress, taskCompleted, taskError;\n    return _regeneratorRuntime.async(function upploadImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            uri = props.route.params.image;\n            childPath = \"post/\" + firebase.auth().currentUser.uid + \"/\" + Math.random().toString(36);\n            console.log(childPath);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 8:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childPath).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred:\" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                savePostData(snapshot);\n                console.log(snapshot);\n              });\n            };\n\n            taskError = function taskError(snapshot) {\n              console.log(snapshot);\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var savePostData = function savePostData(downloadURL) {\n    firebase.firestore().collection('posts').doc(firebase.auth().currentUser.uid).collection(\"userPosts\").add({\n      downloadURL: downloadURL,\n      caption: caption,\n      creation: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      props.navigation.popToTop();\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: props.route.params.image\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Write a Catpion . . . \",\n    onChangeText: function onChangeText(caption) {\n      return setCaption(caption);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Save\",\n    onPress: function onPress() {\n      return upploadImage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/adula/Documents/GitHub/haiku/frontend/components/main/Save.js"],"names":["React","useState","firebase","require","Save","props","caption","setCaption","upploadImage","uri","route","params","image","childPath","auth","currentUser","uid","Math","random","toString","console","log","fetch","response","blob","task","storage","ref","child","put","taskProgress","snapshot","bytesTransferred","taskCompleted","getDownloadURL","then","savePostData","taskError","on","downloadURL","firestore","collection","doc","add","creation","FieldValue","serverTimestamp","navigation","popToTop","flex"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { View, TextInput, Image, Button } from 'react-native'\r\n\r\nimport firebase from 'firebase'\r\nrequire(\"firebase/firestore\")\r\nrequire(\"firebase/firebase-storage\")\r\n\r\nexport default function Save(props) {\r\n    const [caption, setCaption] = useState(\"\")\r\n\r\n    const upploadImage = async ()=> {\r\n        const uri = props.route.params.image\r\n        const childPath = `post/${firebase.auth().currentUser.uid}/${Math.random().toString(36)}`\r\n        console.log(childPath)\r\n\r\n        const response = await fetch(uri)\r\n        const blob = await response.blob()\r\n\r\n        const task = firebase \r\n            .storage()\r\n            .ref()\r\n            .child(childPath)  \r\n            .put(blob)\r\n\r\n        const taskProgress = snapshot => {\r\n            console.log(`transferred:${snapshot.bytesTransferred}`)\r\n        }\r\n\r\n        const taskCompleted = ()=> {\r\n            task.snapshot.ref.getDownloadURL().then( (snapshot)=> {\r\n                savePostData(snapshot)\r\n                console.log(snapshot)\r\n            })\r\n        }\r\n\r\n        const taskError = snapshot=> {\r\n            console.log(snapshot)\r\n        }\r\n\r\n        task.on(\"state_changed\", taskProgress, taskError, taskCompleted)\r\n    }\r\n\r\n    const savePostData = (downloadURL)=> {\r\n        firebase.firestore()\r\n            .collection('posts')\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"userPosts\")\r\n            .add({\r\n                downloadURL,\r\n                caption,\r\n                creation: firebase.firestore.FieldValue.serverTimestamp()\r\n            }).then((function () {\r\n                props.navigation.popToTop()\r\n            }))\r\n    }\r\n\r\n    return (\r\n        <View style={{ flex:1 }}>\r\n            <Image source={{ uri:props.route.params.image }} />\r\n            <TextInput \r\n                placeholder=\"Write a Catpion . . . \"\r\n                onChangeText={(caption)=> setCaption(caption) }\r\n            />\r\n\r\n            <Button title=\"Save\" onPress={ ()=> upploadImage() } />\r\n        </View>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}